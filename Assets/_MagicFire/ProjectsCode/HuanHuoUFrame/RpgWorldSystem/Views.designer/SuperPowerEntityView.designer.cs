// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class SuperPowerEntityViewBase : HealthEntityView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _MSP;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _MSP_Max;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _MP_Max;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _MP;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("MP")]
        [UnityEngine.HideInInspector()]
        public bool _BindMP = true;
        
        [uFrame.MVVM.Attributes.UFGroup("MP")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_MPonlyWhenChanged")]
        protected bool _MPOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("MSP_Max")]
        [UnityEngine.HideInInspector()]
        public bool _BindMSP_Max = true;
        
        [uFrame.MVVM.Attributes.UFGroup("MSP_Max")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_MSP_MaxonlyWhenChanged")]
        protected bool _MSP_MaxOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("MP_Max")]
        [UnityEngine.HideInInspector()]
        public bool _BindMP_Max = true;
        
        [uFrame.MVVM.Attributes.UFGroup("MP_Max")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_MP_MaxonlyWhenChanged")]
        protected bool _MP_MaxOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("MSP")]
        [UnityEngine.HideInInspector()]
        public bool _BindMSP = true;
        
        [uFrame.MVVM.Attributes.UFGroup("MSP")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_MSPonlyWhenChanged")]
        protected bool _MSPOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(SuperPowerEntityViewModel);
            }
        }
        
        public SuperPowerEntityViewModel SuperPowerEntity {
            get {
                return (SuperPowerEntityViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as SuperPowerEntityViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var superpowerentityview = ((SuperPowerEntityViewModel)model);
            superpowerentityview.MSP = this._MSP;
            superpowerentityview.MSP_Max = this._MSP_Max;
            superpowerentityview.MP_Max = this._MP_Max;
            superpowerentityview.MP = this._MP;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.SuperPowerEntity to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindMP) {
                this.BindProperty(this.SuperPowerEntity.MPProperty, this.MPChanged, _MPOnlyWhenChanged);
            }
            if (_BindMSP_Max) {
                this.BindProperty(this.SuperPowerEntity.MSP_MaxProperty, this.MSP_MaxChanged, _MSP_MaxOnlyWhenChanged);
            }
            if (_BindMP_Max) {
                this.BindProperty(this.SuperPowerEntity.MP_MaxProperty, this.MP_MaxChanged, _MP_MaxOnlyWhenChanged);
            }
            if (_BindMSP) {
                this.BindProperty(this.SuperPowerEntity.MSPProperty, this.MSPChanged, _MSPOnlyWhenChanged);
            }
        }
        
        public virtual void MPChanged(Int32 arg1) {
        }
        
        public virtual void MSP_MaxChanged(Int32 arg1) {
        }
        
        public virtual void MP_MaxChanged(Int32 arg1) {
        }
        
        public virtual void MSPChanged(Int32 arg1) {
        }
    }
}
